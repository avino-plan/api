// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package postar

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostarAPIClient is the client API for PostarAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostarAPIClient interface {
	// SendEmail send one email.
	SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error)
}

type postarAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPostarAPIClient(cc grpc.ClientConnInterface) PostarAPIClient {
	return &postarAPIClient{cc}
}

func (c *postarAPIClient) SendEmail(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendEmailResponse, error) {
	out := new(SendEmailResponse)
	err := c.cc.Invoke(ctx, "/github.com.avinoplan.api.postar.PostarAPI/SendEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostarAPIServer is the server API for PostarAPI service.
// All implementations must embed UnimplementedPostarAPIServer
// for forward compatibility
type PostarAPIServer interface {
	// SendEmail send one email.
	SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error)
	mustEmbedUnimplementedPostarAPIServer()
}

// UnimplementedPostarAPIServer must be embedded to have forward compatible implementations.
type UnimplementedPostarAPIServer struct {
}

func (UnimplementedPostarAPIServer) SendEmail(context.Context, *SendEmailRequest) (*SendEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmail not implemented")
}
func (UnimplementedPostarAPIServer) mustEmbedUnimplementedPostarAPIServer() {}

// UnsafePostarAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostarAPIServer will
// result in compilation errors.
type UnsafePostarAPIServer interface {
	mustEmbedUnimplementedPostarAPIServer()
}

func RegisterPostarAPIServer(s grpc.ServiceRegistrar, srv PostarAPIServer) {
	s.RegisterService(&PostarAPI_ServiceDesc, srv)
}

func _PostarAPI_SendEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostarAPIServer).SendEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.avinoplan.api.postar.PostarAPI/SendEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostarAPIServer).SendEmail(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostarAPI_ServiceDesc is the grpc.ServiceDesc for PostarAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostarAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.avinoplan.api.postar.PostarAPI",
	HandlerType: (*PostarAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEmail",
			Handler:    _PostarAPI_SendEmail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postar.proto",
}
